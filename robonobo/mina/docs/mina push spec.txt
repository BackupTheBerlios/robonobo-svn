v0.3 2007/07/31

* Fundamental unit is a page.  Page is byte[] with metadata:
	- Page number (0 is header)
	- Byte offset into entire stream
	- Time offset from beginning of stream (ms)
	
* Packets are purely a method for getting variable-length pages into fixed length udp pkts - they are transient

* Packets are either data packets (contain data) or hold packets (indicate that broadcaster has no more data and receiver should hold)

* Data Packets have metadata:
	- Pkt number - just incrementing positive int, unique only to this connection
	- Lead-in - num of bytes before the first page described in the page headers - may be the whole packet
	- Number of pages beginning in this packet [Np] - may be 0 if packet is in the middle of large page
	- [Np] x page infoblocks - a page infoblock appears only in the first packet containing data from that page
		- Page number (0 is header)
		- Byte offset into entire stream
		- Time offset from beginning of stream (ms)
		- Length
	- Hold time - ms before the next pkt will be sent - set by upload limits

* Hold packets have metadata
	- Leading zero (to distinguish from data pkt)
	- next pkt num to send
	- time (ms) to hold
	- highest available pagenum
	
* All numbers are stored as variable length integers, as per net.robonobo.common.dlugosz.Dlugosz

* Mina persists each stream as two files.  One is a list of var-length ints, as follows
	- Total number of pages (including those we don't have)
	- n * page header
	
* Receiver sends SearchTrans, ReqTrans as before.  Now when broadcaster sends AdvTrans, receiver sends ReqPage commands to request individual pages.
	- ReqPage is just a number list (Dlugosz), consisting of the first page and then offsets for subsequent pages.

* Receiver maintains a list of available broadcasters (who have sent AdvTrans).  Receiver goes down this list and sends ReqPage commands requesting pages.  
	- Once ReqPage has been sent, broadcaster is not asked for any more pages until that entire page has arrived.
	- When broadcaster has sent all pages, next ReqPage is sent
	- Receiver keeps a NumPages score for each broadcaster, which is the number of pages requested per ReqPage.
	- If N pages are received from a broadcaster without missed packets, NumPages score for that broadcaster is incremented.
	- If missed packet is observed, ReqPkt is sent (contains just packet num) and number of pages for that broadcaster is decremented.
	- If missed packet is observed and NumPages is 1, broadcaster is put on hold for T seconds - if this happens again afterwards, put on hold for 2T seconds, then 4T - just kill at some point)

* Receiver records RTT between sending a ReqPage and receiving the first packet with that page, uses 2 * this value as timelapse after which to ask for missing packets

* If a receiver outruns a rebroadcaster, it will find itself receiving hold packets with long hold times
	- The receiver then tells the rebroadcaster to go into standby.  Rebroadcaster cancels all pending pages & pkts, and increments
	  pkt num by 10(?) to prevent pkt collisions.  Rebroadcaster then sends hold pkts every 10(?) seconds which contain
	  the latest contiguous pagenum.  Receiver can then send reqpage if rebroadcaster can help.

* Changes to Mina - must
	- standby
	- need to sort out reception/rebroadcasting state, what happens if we start receiving a half-received stream
	- create cachemanager to look after which streams we have
		
* Changes to mina - should
	- use stream num (unique only to receiver/broadcaster pair) in mina cmds, rather than URL, to save bits
	- merge location changes in

* Stuff to test
